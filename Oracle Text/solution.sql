-- 1.1.
CREATE TABLE CYTATY AS SELECT * FROM ZTPD.CYTATY;

-- 1.2.
SELECT AUTOR, TEKST FROM CYTATY 
WHERE UPPER(TEKST) LIKE '%PESYMISTA%' AND UPPER(TEKST) LIKE '%OPTYMISTA%';

-- 1.3.
CREATE INDEX CYTATY_TEKST_IDX ON CYTATY(TEKST) INDEXTYPE IS CTXSYS.CONTEXT;

-- 1.4.
SELECT AUTOR, TEKST FROM CYTATY 
WHERE CONTAINS(TEKST, 'PESYMISTA AND OPTYMISTA') > 0;

-- 1.5.
SELECT AUTOR, TEKST FROM CYTATY 
WHERE CONTAINS(TEKST, 'PESYMISTA ~ OPTYMISTA') > 0;

-- 1.6.
SELECT AUTOR, TEKST FROM CYTATY 
WHERE CONTAINS(TEKST, 'NEAR((PESYMISTA, OPTYMISTA), 3)') > 0;

-- 1.7.
SELECT AUTOR, TEKST FROM CYTATY 
WHERE CONTAINS(TEKST, 'NEAR((PESYMISTA, OPTYMISTA), 10)') > 0;

-- 1.8.
SELECT AUTOR, TEKST FROM CYTATY 
WHERE CONTAINS(TEKST, 'życi%') > 0;

-- 1.9.
SELECT SCORE(1) SCORE, AUTOR, TEKST FROM CYTATY 
WHERE CONTAINS(tekst, 'życi%', 1) > 0;

-- 1.10.
SELECT AUTOR, TEKST, SCORE(1) DOPASOWANIE FROM CYTATY 
WHERE CONTAINS(tekst, 'życi%', 1) > 0 
ORDER BY DOPASOWANIE DESC 
FETCH NEXT 1 ROWS ONLY;

-- 1.11.
SELECT AUTOR, TEKST FROM CYTATY 
WHERE CONTAINS(TEKST, 'FUZZY(PROBELM)') > 0;

-- 1.12.
INSERT INTO CYTATY VALUES(
    100, 
    'Bertrand Russell', 
    'To smutne, że głupcy są tacy pewni siebie, a ludzie rozsądni tacy pełni wątpliwości.'
);
COMMIT;

-- 1.13. 
SELECT AUTOR, TEKST FROM CYTATY WHERE CONTAINS(TEKST, 'GŁUPCY') > 0;
-- indeks nie jest uaktualniany na bieżąco

-- 1.14.
SELECT TOKEN_TEXT FROM DR$CYTATY_TEKST_IDX$I WHERE TOKEN_TEXT = 'GŁUPCY';

-- 1.15.
DROP INDEX CYTATY_TEKST_IDX;
CREATE INDEX CYTATY_TEKST_IDX ON CYTATY(TEKST) INDEXTYPE IS CTXSYS.CONTEXT;

-- 1.16. 
SELECT AUTOR, TEKST FROM CYTATY WHERE CONTAINS(TEKST, 'GŁUPCY') > 0;

-- 1.17.
DROP INDEX CYTATY_TEKST_IDX;
DROP TABLE CYTATY;

-- 2.1.
CREATE TABLE QUOTES AS SELECT * FROM ZTPD.QUOTES;

-- 2.2.
CREATE INDEX QUOTES_TEXT_IDX ON QUOTES(TEXT) INDEXTYPE IS CTXSYS.CONTEXT;

-- 2.3.
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, 'WORK') > 0;
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, '$WORK') > 0;
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, 'WORKING') > 0;
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, '$WORKING') > 0;

-- 2.4.
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, 'it') > 0;
-- słowo 'it' nie jest indeksowane

-- 2.5.
SELECT * FROM CTX_STOPLISTS;
-- DEFAULT_STOPLIST

-- 2.6.
SELECT * FROM CTX_STOPWORDS;

-- 2.7.
DROP INDEX QUOTES_TEXT_IDX;
CREATE INDEX QUOTES_TEXT_IDX ON QUOTES(TEXT) 
INDEXTYPE IS CTXSYS.CONTEXT PARAMETERS ('stoplist CTXSYS.EMPTY_STOPLIST');

-- 2.8.
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, 'it') > 0;
-- tak

-- 2.9.
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, 'fool and humans') > 0;

-- 2.10.
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, 'fool and computer') > 0;

-- 2.11.
SELECT AUTHOR, TEXT FROM QUOTES 
WHERE CONTAINS(TEXT, '(fool and computer) within sentence') > 0;

-- 2.12.
DROP INDEX QUOTES_TEXT_IDX;

-- 2.13.
BEGIN
    ctx_ddl.create_section_group('nullgroup', 'NULL_SECTION_GROUP');
    ctx_ddl.add_special_section('nullgroup',  'SENTENCE');
    ctx_ddl.add_special_section('nullgroup',  'PARAGRAPH');
END;

-- 2.14.
CREATE INDEX QUOTES_TEXT_IDX ON QUOTES(TEXT) 
INDEXTYPE IS CTXSYS.CONTEXT PARAMETERS ('stoplist CTXSYS.EMPTY_STOPLIST section group nullgroup');

-- 2.15.
SELECT AUTHOR, TEXT FROM QUOTES 
WHERE CONTAINS(TEXT, '(fool and computer) within sentence') > 0;
-- tak

-- 2.16.
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, 'humans') > 0;

-- 2.17.
DROP INDEX QUOTES_TEXT_IDX;
BEGIN
    ctx_ddl.create_preference('lex_z_m','BASIC_LEXER');
    ctx_ddl.set_attribute('lex_z_m', 'printjoins', '_-');
    ctx_ddl.set_attribute('lex_z_m', 'index_text', 'YES');
END;
CREATE INDEX QUOTES_TEXT_IDX ON QUOTES(TEXT) INDEXTYPE IS CTXSYS.CONTEXT 
PARAMETERS ('stoplist CTXSYS.EMPTY_STOPLIST section group nullgroup LEXER lex_z_m');

-- 2.18.
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, 'humans') > 0;
-- nie

-- 2.19.
SELECT AUTHOR, TEXT FROM QUOTES WHERE CONTAINS(TEXT, 'non\-humans') > 0;

-- 2.20.
DROP TABLE QUOTES;
EXEC ctx_ddl.drop_preference('lex_z_m');
